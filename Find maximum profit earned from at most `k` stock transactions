#include <iostream>
#include <vector>
using namespace std;
 
// Find maximum profit earned from at most `k` stock transactions.
// Input to the function is stock prices of `n` days and positive number `k`
int findMaxProfit(vector<int> &price, int k)
{
    // get the number of days `n`
    int n = price.size();
 
    // `profit[i][j]` stores the maximum profit gained by doing
    // at most `i` transactions till j'th day
    int profit[k+1][n];
 
    // fill `profit[][]` matrix in a bottom-up fashion
    for (int i = 0; i <= k; i++)
    {
        for (int j = 0; j < n; j++)
        {
            // profit is 0 when:
            // `i = 0`, i.e., for 0th day
            // `j = 0`, i.e., no transaction is being performed
 
            if (i == 0 || j == 0) {
                profit[i][j] = 0;
            }
            else {
                int max_so_far = 0;
                for (int k = 0; k < j; k++)
                {
                    int curr_price = price[j] - price[k] + profit[i-1][k];
                    if (max_so_far < curr_price) {
                        max_so_far = curr_price;
                    }
                }
 
                profit[i][j] = max(profit[i][j-1], max_so_far);
            }
        }
    }
 
    return profit[k][n-1];
}
 
int main()
{
    vector<int> price { 1, 5, 2, 3, 7, 6, 4, 5 };
    int k = 3;
 
    cout << "The maximum possible profit is " << findMaxProfit(price, k);
 
    return 0;
}


